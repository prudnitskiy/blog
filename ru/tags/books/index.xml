<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Books on Инфраструктурный блог</title><link>/ru/tags/books/</link><description>Инфраструктурный блог (Books)</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Sat, 04 Mar 2023 11:00:00 +0000</lastBuildDate><atom:link href="/ru/tags/books/index.xml" rel="self" type="application/rss+xml"/><item><title>Книги для инфраструктурного инженера, часть 1 - hard skills</title><link>/ru/post/2023-01-24-books/</link><pubDate>Sat, 04 Mar 2023 11:00:00 +0000</pubDate><guid>/ru/post/2023-01-24-books/</guid><description>&lt;p>Должен признаться &amp;ndash; я люблю книги. Сейчас это не модно, потому, что книги отнимают очень много времени для прочтения, а результативность под вопросом. Ту же самую информацию можно получить в Google за 5 минут поиска. Тем не менее я считаю пользу книг сильно недооцененной. Поиск в Google дает ответ на очень узкий конкретный вопрос (и ответ, часто, не оптимальный, а может и вовсе неверный). Хорошая, качественная книга дает обзор проблемы с разных точек зрения и показывает, как части связываются в единое целое.&lt;/p>
&lt;p>В этой статье я собрал лучшие (на мой взгляд) книги для хорошего инфраструктурного инженера (cloud engineer, system administrator, devops, site reliability engineer, как вам больше нравится). Топ получился больше, чем я планировал, потому он разделен на 2 части. В первой части будут книги по техническим знаниям, во второй - по нетехническим, но все равно важным. Я специально отсортировал книги по алфавиту по имени автора, чтобы снизить предвзятость своей оценки.&lt;/p>
&lt;p>Должен добавить, что я верю в &lt;a href="https://en.wikipedia.org/wiki/Lindy_effect">эффект Линди&lt;/a> и потому не удивляйтесь, что здесь есть сравнительно не новые книги. Шанс того, что не прошедшая испытание временем книга окажется хорошей, по моему мнению - невысок.&lt;/p>
&lt;p>Итак, топ-10 книг для инфраструктурного инженера, hard skills:&lt;/p>
&lt;h2 id="beyer-jones-petoff-murphy---site-reliability-engineeringhttpssregooglesre-booktable-of-contents" >
&lt;div>
&lt;a href="#beyer-jones-petoff-murphy---site-reliability-engineeringhttpssregooglesre-booktable-of-contents">
#
&lt;/a>
Beyer, Jones, Petoff, Murphy - &lt;a href="https://sre.google/sre-book/table-of-contents/">Site reliability engineering&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Прекрасный экскурс в то, как работает инфраструктура в действительно больших проектах (на примере Google). Именно с этой книги началось понятие SRE за пределами Google. Авторы рассказывают, как в Google принимаются те или иные решения (на основе метрик), почему нельзя сделать 100% надежную систему (это слишком дорого), как решить, когда остановится (посчитать деньги), как проектировать систему с заданным уровнем надежности&amp;hellip; Даже, если ваша инфраструктура намного меньше, чем у Google - вы найдете что-то полезное для себя. Принципы построения инфраструктур, описанных в этой книге - универсальны.&lt;/p>
&lt;h2 id="bovet---understanding-linux-kernelhttpswwwamazoncomunderstanding-linux-kernel-third-danieldp0596005652" >
&lt;div>
&lt;a href="#bovet---understanding-linux-kernelhttpswwwamazoncomunderstanding-linux-kernel-third-danieldp0596005652">
#
&lt;/a>
Bovet - &lt;a href="https://www.amazon.com/Understanding-Linux-Kernel-Third-Daniel/dp/0596005652">Understanding linux kernel&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Подавляющее большинство систем, с которыми работает операционный инженер базируется на Linux. Эта книга &amp;ndash; наверное, самый полный и подробный справочник по устройству ядра и взаимодействию kernel space - user space. Книга очень большая, но на удивление легко читается. Не менее классический &lt;a href="https://www.amazon.com/Linux-Kernel-Development-Robert-Love/dp/0672329468">труд Роберта Лава&lt;/a> больше ориентирован на разработку и читается не в пример тяжлее. Понимание того, как в целом работает ядро &amp;ndash; критически важно для решения проблем с производительностью. Без знания того, как (и что) там тикает внутри &amp;ndash; проблемы производительности придется решать или &amp;ldquo;заливкой деньгами&amp;rdquo; (классический шаблон стартапов, за который они теперь вынуждены платить) или магическими рецептами, которые могут и не помочь. А могут даже повредить.&lt;/p>
&lt;h2 id="felleisen-findler-flatt-krishnamurthi---how-to-design-programshttpshtdporg2022-8-7bookindexhtml" >
&lt;div>
&lt;a href="#felleisen-findler-flatt-krishnamurthi---how-to-design-programshttpshtdporg2022-8-7bookindexhtml">
#
&lt;/a>
Felleisen, Findler, Flatt, Krishnamurthi - &lt;a href="https://htdp.org/2022-8-7/Book/index.html">How to design programs&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Нравится нам это или нет - но современному инфраструктурному инженеру приходится писать код. В основном - инструменты для автоматизации своего труда. Подавляющее большинство из нас пишет код отвратительно, потому, что мы не были профессиональными программистами и просто не знаем, как правильно писать надежный и поддерживаемый код. Эта книга - классический учебник от MIT по проектированию программ. Книга весьма не новая и в качестве иллюстрации использует экзотический язык Racket (это такой Lisp, который хорошо кушал), однако важно не это. Книга очень подробно проводит по всем этапам проектирования программы, начиная от сбора требований и выбора алгоритмов до написания кода и подходов к его поддержки. В отличие от не менее известного SICP (Abelson et al) - эта книга старается использовать максимально инженерный подход с минимумом эзотерики и &amp;ldquo;просто поверьте на слово&amp;rdquo;. Из всего списка выше она выглядит самой бесполезной (и, наверное, самой сложной), но это книга, которая стоит прочтения.&lt;/p>
&lt;h2 id="gregg---system-performancehttpswwwbrendangreggcomsystems-performance-2nd-edition-bookhtml" >
&lt;div>
&lt;a href="#gregg---system-performancehttpswwwbrendangreggcomsystems-performance-2nd-edition-bookhtml">
#
&lt;/a>
Gregg - &lt;a href="https://www.brendangregg.com/systems-performance-2nd-edition-book.html">System performance&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Безусловно лучшая книга по производительности UNIX-систем с точки зрения системы. Эта книга рассматривает производительность программы как данность и помогает понять, как измерить и &amp;ldquo;изогнуть&amp;rdquo; систему под конкретные задачи. Написана человеком, который занимается производительностью в Linux уже лет 20 и был ведущим инженером в Netflix. Абсолютно точно стоит прочитать после SRE Book, чтобы понять - как измерять производительность и что может на нее повлиять (а повлиять может многое и подчас довольно неожиданное).&lt;/p>
&lt;h2 id="goralski---the-illustrated-networkhttpswwwamazoncomillustrated-network-modern-kaufmann-networkingdp0123745411" >
&lt;div>
&lt;a href="#goralski---the-illustrated-networkhttpswwwamazoncomillustrated-network-modern-kaufmann-networkingdp0123745411">
#
&lt;/a>
Goralski - &lt;a href="https://www.amazon.com/Illustrated-Network-Modern-Kaufmann-Networking/dp/0123745411">The illustrated network&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Солидный 800-страничный кирпич про устройство сети. Сети рассматриваются с точки зрения стека TCP/IP, ибо победил он с разгромным счетом и не-IP сети сейчас очень большая редкость. Это очень подробное описание принципов, алгоритмов и протоколов сети, начиная с L2 и заканчивая QoS и высокоуровневой маршрутизаций. Обязательна для прочтения сетевыми инженерам (начиная от претендующих на сертификаты с буквой P в названии), но обычному инфраструктурному инженеру тоже вреда не принесет. Как минимум - это поможет в выборе между TCP и UDP и отучит защищаться от DDoS, блокируя адреса на iptables по одному&lt;/p>
&lt;h2 id="humble---continuous-deliveryhttpswwwamazoncomdp0321601912tagcontindelive-20" >
&lt;div>
&lt;a href="#humble---continuous-deliveryhttpswwwamazoncomdp0321601912tagcontindelive-20">
#
&lt;/a>
Humble - &lt;a href="https://www.amazon.com/dp/0321601912?tag=contindelive-20">Continuous delivery&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Полный, подробный справочник по DevOps. В отличие от попсового &amp;ldquo;проекта Феникс&amp;rdquo; и &amp;ldquo;руководства по DevOps&amp;rdquo; Кима - эта книга написана не для стратегов-менеджеров, а для тех инженеров, которым все это реализовывать &amp;ldquo;на земле&amp;rdquo;. Книга подробно описывает, откуда взялась идея DevOps, какую проблему она решает (нет, не любую) и какие там есть ограничения. Не смотря на то, что книга весьма немолода - концепции в ней описаны универсальные. Абсолютно точно необходима DevOps-ам, остальным - для расширения кругозора.&lt;/p>
&lt;h2 id="kleppman---design-of-data-intensive-appshttpswwworeillycomlibraryviewdesigning-data-intensive-applications9781491903063" >
&lt;div>
&lt;a href="#kleppman---design-of-data-intensive-appshttpswwworeillycomlibraryviewdesigning-data-intensive-applications9781491903063">
#
&lt;/a>
Kleppman - &lt;a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/">Design of data-intensive apps&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Книга &amp;ldquo;с кабанчиком&amp;rdquo; известна, наверное, всем. Мало кто ее читал, но все про нее слышали. Это книга из той редкой породы, что выходят раз в десятилетие. Контент - плотное погружение во все основные технологии, что лежат в основе современного высокопроизводительного ПО для обработки данных. Алгоритмы хранения информации (сжатие с потерями и без), поиска (поисковые деревья разных видов), записи данных, поиска консенсуса в гетерогенных системах, защиты от сбоя. Почти тысяча страниц концентрированной информации. Проглотить этот кирпич одним махом невозможно, но это без шуток - настольная книга для любого, кто работает с большими объемами данных. Инфраструктурный инженер должен понимать, какие примитивы лежат в основе систем, с которыми он работает&lt;/p>
&lt;h2 id="schneier---applied-cryptographyhttpswwwamazoncomapplied-cryptography-protocols-algorithms-source-ebookdpb072k4xbjj" >
&lt;div>
&lt;a href="#schneier---applied-cryptographyhttpswwwamazoncomapplied-cryptography-protocols-algorithms-source-ebookdpb072k4xbjj">
#
&lt;/a>
Schneier - &lt;a href="https://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Source-ebook/dp/B072K4XBJJ">Applied cryptography&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Сравнительно короткий и сравнительно простой обзор криптографии. Криптография очень сложная область сама по себе, так что не стоит ждать экспертности после прочтения. Эта книга кратко описывает понятия, которые там вообще есть - виды шифрования (блочное, поточное), виды ключей (симметричные и ассиметричные). Главная мысль книги - никогда не изобретать крипто примитивы самому. Есть миллион способов сделать маленькую сложно уловимую ошибку, которая сделает шифр легковскрываемым, а значит - бессмысленным. Бонусом книга поможет выбрать криптографическое решение для конкретной ситуации и научит оценивать риски. Книга прекрасно подходит для понимания границ незнания в вопросах защиты информации, а заодно приоткрывает процесс дизайна криптографических решений.&lt;/p>
&lt;h2 id="tannenbaum---structured-computer-organizationhttpswwwamazoncomstructured-computer-organization-andrew-tanenbaum-ebookdpb0093k4p9uref_ast_author_dp" >
&lt;div>
&lt;a href="#tannenbaum---structured-computer-organizationhttpswwwamazoncomstructured-computer-organization-andrew-tanenbaum-ebookdpb0093k4p9uref_ast_author_dp">
#
&lt;/a>
Tannenbaum - &lt;a href="https://www.amazon.com/Structured-Computer-Organization-Andrew-Tanenbaum-ebook/dp/B0093K4P9U?ref_=ast_author_dp">Structured computer organization&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>В русском переводе эта книга известна как &amp;ldquo;Архитектура компьютера&amp;rdquo; и издавали ее в издательстве Питер, серия Classic computer science. Если Клеппман - это экскурс в алгоритмы и технологии обработки данных, то Танненбаум - это экскурс в устройство компьютеров в целом - микроархитектуры, их виды и влияние на производительность, устройство памяти разных видов, шины и подключение устройств&amp;hellip; Фактически эта книга - конспект лекций, которые профессор Таненбаум читает в университете Амстердама (до сих пор, кстати, читает). Книга имеет какой-то сумасшедший для столь узкой сферы тираж и пережила уже 6 переизданий (первая редакция вышла аж 1976 году). Не смотря на то, что считается слегка устаревшей (самое свежее издание - 2012 года) - принципы и концепции остались те же. Книгу точно стоит прочитать - как минимум для общего понимания ландшафта.&lt;/p>
&lt;h2 id="tsoukalos---mastering-gohttpswwwamazoncommastering-go-professional-utilities-concurrentdp1801079315" >
&lt;div>
&lt;a href="#tsoukalos---mastering-gohttpswwwamazoncommastering-go-professional-utilities-concurrentdp1801079315">
#
&lt;/a>
Tsoukalos - &lt;a href="https://www.amazon.com/Mastering-Go-professional-utilities-concurrent/dp/1801079315">Mastering go&lt;/a>
&lt;/div>
&lt;/h2>
&lt;p>Golang считается одним из самых популярных языков программирования в среде инфраструктурных инженеров (второе место - Python, Ruby и Perl влачат маргинальное существование). Компактная грамматика (2 страницы текста!), богатейший тулинг и стандартная библиотека, предельно удобная дистрибьюция сделали язык сверх-популярным в среде админов-автоматизаторов. Если How to design programs учит &lt;em>что&lt;/em> писать, то эта книга на конкретных примерах показывает &lt;em>как&lt;/em>. Она совсем не такая всеобъемлющая, как книга Кернигана, зато практически ориентирована. Книгу можно просто прочитать, как отдельный труд, а можно использовать как справочник при написании кода для конкретных задач&lt;/p>
&lt;h2 id="заключение" >
&lt;div>
&lt;a href="#%d0%b7%d0%b0%d0%ba%d0%bb%d1%8e%d1%87%d0%b5%d0%bd%d0%b8%d0%b5">
#
&lt;/a>
Заключение
&lt;/div>
&lt;/h2>
&lt;p>Хорошая книга описывает базовые концепции, которые мало меняются со временем. Польза понимания базовых идей еще и в том, что их сравнительно мало, но конкретные реализации (коих много) - строятся на базовых концепциях. Понимание базы даст возможность не только понять, как конкретные кирпичики укладываются в общую картину, но и поможет в изучении новых идей и концепций - базовые принципы универсальны. Читайте книги.&lt;/p></description></item></channel></rss>